generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int   @unique @default(autoincrement())
  name            String
  email           String   @unique
  password        String
  phone_number    String
  profile_picture String?
  bio              String?
  verified        Boolean?
  verification_token String? @default(uuid())
  password_reset_token String?
  password_reset_expires DateTime?
  user_type       UserType
  Studios         Studio[]  @relation("StudioOwner")
  Bookings        Booking[] @relation("UserBookings")
  Reviews         Review[]
}

model Address{
  id           Int  @id @default(autoincrement())
  studio_id    Int  @unique
  studio       Studio @relation(fields: [studio_id],references: [id])
  address      String
  city         String
  state        String
  country      String
  pincode      String
  latitude     Decimal   @default(0.0000000) 
  longitude    Decimal   @default(0.0000000)  
}

model Studio {
  id            Int       @id @default(autoincrement())
  host_id       Int
  name          String
  description   String?
  studio_type   String
  hourly_rate   Float
  max_people    Int
  min_duration  Int
  size          Float
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?
  host          User       @relation("StudioOwner", fields: [host_id], references: [id])
  address       Address?
  availability  Availability[]
  bookings      Booking[]
  reviews       Review[]
  amenities     Amenity[]
  photos        Photo[]
  props         Prop[]
  addons        Addon[]
  equipments    Equipment[]
}

// model BookedSlots {
//   id            Int      @id @default(autoincrement())
//   studio_id     Int
//   date          DateTime
//   start_time    DateTime
//   end_time      DateTime

// }


model Availability {
  id           Int      @id @default(autoincrement())
  studio_id    Int
  date         DateTime     
  start_time   Int 
  end_time     Int
  is_recurring Boolean   @default(false) 
  studio       Studio    @relation(fields: [studio_id], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
} 

model Booking {
  id          Int       @id @default(autoincrement())
  user_id     Int
  studio_id   Int
  start_time  DateTime
  end_time    DateTime
  total_cost  Float
  status      BookingStatus
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation("UserBookings", fields: [user_id], references: [id])
  studio      Studio    @relation(fields: [studio_id], references: [id])
  payment     Payment[]
  addons      BookingAddon[]
}

model Amenity {
  id        Int           @id @default(autoincrement())
  name      String
  icon_url  String
  Studio    Studio[]
}

model Equipment{
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  icon_url      String
  studio        Studio  @relation(fields: [studio_id], references: [id])
  studio_id     Int
  
}

model Prop{
  id          Int   @id @default(autoincrement())
  name        String
  description String?
  icon_url    String
  studio      Studio  @relation(fields: [studio_id], references: [id])
  studio_id   Int
}

model Addon {
  id           Int            @id @default(autoincrement())
  studio       Studio         @relation(fields: [studioId], references: [id])
  studioId     Int
  name         String
  description  String?
  price        Decimal        @db.Decimal(10, 2)
  category     String
  imageUrl     String?
  availability String?
  isActive     Boolean        @default(true)
  bookings     BookingAddon[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  @@index([studioId])
  @@index([category])
}

model BookingAddon {
  id          Int      @id @default(autoincrement())
  booking     Booking  @relation(fields: [booking_id], references: [id])
  booking_id  Int
  addon       Addon    @relation(fields: [addon_id], references: [id])
  addon_id    Int
  quantity    Int      @default(1)
  created_at  DateTime @default(now())
}

model Review {
  id    Int       @id @default(autoincrement())
  user_id      Int
  studio_id    Int
  rating       Int
  comment      String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id])
  studio       Studio    @relation(fields: [studio_id], references: [id])
  @@unique([user_id, studio_id])
}


model Payment {
  id   Int       @id @default(autoincrement())
  booking_id   Int
  booking     Booking  @relation(fields: [booking_id], references: [id])
  amount       Float
  payment_method String
  payment_status PaymentStatus
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Photo{
  id                Int @id @default(autoincrement())
  studio            Studio @relation(fields: [studio_id], references: [id])
  studio_id         Int
  url               String
  upload_date       DateTime
}


enum UserType {
  USER
  HOST
}

enum BookingStatus {
  Pending
  Confirmed
  Canceled
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
}
